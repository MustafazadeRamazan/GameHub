@model IMS_Project.Models.admin_Employee

@{
    ViewBag.Title = "Profile";
    ViewBag.SubTitle = "Edit";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">

    <div class="col-md-8">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.EmpID)

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control", min="18", required = "required" } })
                    @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.DateofBirth, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateofBirth, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateofBirth, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Gender", new List<SelectListItem>() {
                                        new SelectListItem(){Text="Male",Value="Male"},
                                        new SelectListItem(){Text="Female",Value="Female"},
                                        new SelectListItem(){Text="Other",Value="Other"}

                        }, "--Select Gender--", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhotoPath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhotoPath, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.PhotoPath, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>

    <div class="col-md-4">
        <div>
            @if (string.IsNullOrEmpty(Model.PhotoPath))
            {
                <img id="profile-image" src="~/Content/Images/no-image.png" alt="" class="img-thumbnail" width="160" height="160" /> }
            else
            {
                <img id="profile-image" src="@Model.PhotoPath" alt="" class="img-thumbnail" width="160" height="160" />            
            }
        </div><br />
        <div>
            <input type="file" id="image-input" style="display:none" />
            <a href="#" class="btn btn-sm btn-primary" onclick="document.getElementById('image-input').click()"> <i class="fa fa-fw fa-folder-open-o"></i> Browse</a>
            <a href="#" class="btn btn-sm btn-danger" onclick="clearImage()"> <i class="fa fa-fw fa-remove"></i> Clear</a>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-4 col-md-4">
            <input type="submit" value="Save" class="btn btn-success" />
        </div>
    </div>
    <script>
        function previewImage(event) {
            var image = document.getElementById('profile-image');
            image.src = URL.createObjectURL(event.target.files[0]);

            var input = document.getElementById('PhotoPath');
            var filePath = event.target.value;
            var fileName = filePath.split('\\').pop().split('/').pop();
            input.value = "/Content/Images/" + fileName;
        }


        function clearImage() {
            var input = document.getElementById('PhotoPath');
            var image = document.getElementById('profile-image');
            image.src = "/Content/Images/ProfileImage.svg";
            input.value = '/Content/Images/no-image.png';
        }

        var imageInput = document.getElementById('image-input');
        imageInput.addEventListener('change', previewImage);
    </script>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
